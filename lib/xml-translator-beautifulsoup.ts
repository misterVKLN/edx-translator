import { generateText } from "ai"
import { createOpenAI } from "@ai-sdk/openai"

// –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ª–æ–≥–∏–∫–∏ Streamlit —Å BeautifulSoup-–ø–æ–¥–æ–±–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º
export class BeautifulSoupXMLTranslator {
  private apiKey: string
  private model: string

  constructor(apiKey: string, model: string) {
    this.apiKey = apiKey
    this.model = model
  }

  // –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø extract_text_and_attributes –∏–∑ Streamlit
  private extractTextAndAttributes(content: string, tags: string[]): Record<string, string> {
    const translations: Record<string, string> = {}

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞
    for (const tag of tags) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞
      const textNodeRegex = new RegExp(`<${tag}[^>]*>([^<]+)</${tag}>`, "g")
      let match
      while ((match = textNodeRegex.exec(content)) !== null) {
        const text = match[1].trim()
        if (text) {
          translations[text] = ""
        }
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ç–µ–≥–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
      const selfClosingRegex = new RegExp(`<${tag}[^>]*>([^<]*?)(?=<|$)`, "g")
      let selfMatch
      while ((selfMatch = selfClosingRegex.exec(content)) !== null) {
        const text = selfMatch[1].trim()
        if (text && !text.includes("<")) {
          translations[text] = ""
        }
      }
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –í–°–ï –∞—Ç—Ä–∏–±—É—Ç—ã display_name –∏ markdown (–∫–∞–∫ –≤ Streamlit)
    const allAttributeRegex = /(display_name|markdown)="([^"]+)"/g
    let attrMatch
    while ((attrMatch = allAttributeRegex.exec(content)) !== null) {
      const value = attrMatch[2].trim()
      if (value) {
        translations[value] = ""
      }
    }

    // –î–û–ë–ê–í–õ–Ø–ï–ú –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    const otherAttrs = ["short_description", "description", "title", "label", "alt"]
    for (const attr of otherAttrs) {
      const attrRegex = new RegExp(`${attr}="([^"]+)"`, "g")
      let match
      while ((match = attrRegex.exec(content)) !== null) {
        const value = match[1].trim()
        if (value && value.length > 2) {
          translations[value] = ""
        }
      }
    }

    console.log(`üìù Extracted ${Object.keys(translations).length} texts for translation:`, Object.keys(translations))
    return translations
  }

  // –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø replace_text_and_attributes –∏–∑ Streamlit
  private replaceTextAndAttributes(content: string, tags: string[], translationMap: Record<string, string>): string {
    let result = content

    // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞
    for (const tag of tags) {
      for (const [original, translated] of Object.entries(translationMap)) {
        if (translated && translated !== original) {
          // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
          const escapedOriginal = original.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")

          // –ó–∞–º–µ–Ω—è–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —É–∑–ª–∞—Ö
          const textRegex = new RegExp(`(<${tag}[^>]*>)${escapedOriginal}(</${tag}>)`, "g")
          result = result.replace(textRegex, `$1${translated}$2`)

          // –ó–∞–º–µ–Ω—è–µ–º –≤ —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è —Ç–µ–≥–∞—Ö
          const selfClosingRegex = new RegExp(`(<${tag}[^>]*>)${escapedOriginal}(?=<|$)`, "g")
          result = result.replace(selfClosingRegex, `$1${translated}`)
        }
      }
    }

    // –ó–∞–º–µ–Ω—è–µ–º –í–°–ï –∞—Ç—Ä–∏–±—É—Ç—ã
    const allAttrs = ["display_name", "markdown", "short_description", "description", "title", "label", "alt"]
    for (const attr of allAttrs) {
      for (const [original, translated] of Object.entries(translationMap)) {
        if (translated && translated !== original) {
          const escapedOriginal = original.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")
          const attrRegex = new RegExp(`(${attr}=")${escapedOriginal}(")`, "g")
          result = result.replace(attrRegex, `$1${translated}$2`)
        }
      }
    }

    return result
  }

  // –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø find_and_translate_xml –∏–∑ Streamlit
  async translateXMLContent(
    content: string,
    targetLanguage: string,
  ): Promise<{
    translatedContent: string
    translationsCount: number
  }> {
    // –¢–û–ß–ù–û –¢–ï –ñ–ï –¢–ï–ì–ò, —á—Ç–æ –≤ Streamlit
    const tags = ["problem", "label", "choice", "sequential", "vertical", "chapter", "html", "course"]

    // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–∫–∞–∫ –≤ Streamlit)
    const translationMap = this.extractTextAndAttributes(content, tags)
    const textsToTranslate = Object.keys(translationMap).filter((text) => text.length > 0)

    if (textsToTranslate.length === 0) {
      console.log("üìù No texts found for translation in XML")
      return { translatedContent: content, translationsCount: 0 }
    }

    console.log(`üìù Found ${textsToTranslate.length} texts to translate in XML`)

    // 2. –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞–∂–¥—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ (–∫–∞–∫ –≤ Streamlit)
    let translationsCount = 0
    const openai = createOpenAI({ apiKey: this.apiKey })

    for (const text of textsToTranslate) {
      try {
        console.log(`üîÑ Translating: "${text.substring(0, 50)}${text.length > 50 ? "..." : ""}"`)
        const translatedText = await this.translateSingleText(text, targetLanguage, openai)
        if (translatedText && translatedText !== text) {
          translationMap[text] = translatedText
          translationsCount++
          console.log(
            `‚úÖ Translated to: "${translatedText.substring(0, 50)}${translatedText.length > 50 ? "..." : ""}"`,
          )
        } else {
          console.log(`‚ö†Ô∏è No translation for: "${text.substring(0, 50)}${text.length > 50 ? "..." : ""}"`)
        }
      } catch (error) {
        console.error(`‚ùå Failed to translate: "${text}"`, error)
        translationMap[text] = text // –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    }

    // 3. –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ (–∫–∞–∫ –≤ Streamlit)
    const translatedContent = this.replaceTextAndAttributes(content, tags, translationMap)

    console.log(`üéâ XML translation completed: ${translationsCount} translations made`)
    return { translatedContent, translationsCount }
  }

  private async translateSingleText(text: string, targetLanguage: string, openai: any): Promise<string> {
    const prompt = `
You MUST translate the content strictly into ${targetLanguage}, and ONLY ${targetLanguage}.
You MUST NOT add any explanations, disclaimers, general knowledge, or other languages.
You MUST preserve the original formatting, structure, and tags.
If you are unsure, return the original content as-is.
You are a TRANSLATION TOOL ONLY. Do not act as an assistant or provide commentary.
NEVER add phrases like "Here is the translation" or "The translated content is".
NEVER mix languages in your response.
RETURN ONLY THE TRANSLATED CONTENT, NOTHING ELSE.

Translate this text into ${targetLanguage}:
${text}
`

    const { text: translatedText } = await generateText({
      model: openai(this.model),
      prompt,
      temperature: 0.1,
      maxTokens: 1000,
    })

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    return this.validateAndCleanResponse(translatedText, text, targetLanguage)
  }

  private validateAndCleanResponse(response: string, originalText: string, targetLanguage: string): string {
    if (!response) return originalText

    const unwantedPhrases = [
      "Here is the translation",
      "The translated content is",
      "Here's the translated",
      "Translation:",
      "Translated version:",
      "–í–æ—Ç –ø–µ—Ä–µ–≤–æ–¥",
      "–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
    ]

    let cleaned = response.trim()

    for (const phrase of unwantedPhrases) {
      const regex = new RegExp(`^${phrase}[:\\s]*`, "i")
      cleaned = cleaned.replace(regex, "")
    }

    const assistantIndicators = [
      "I cannot",
      "I'm unable",
      "As an AI",
      "I apologize",
      "Sorry, but",
      "I can't",
      "–Ø –Ω–µ –º–æ–≥—É",
      "–ò–∑–≤–∏–Ω–∏—Ç–µ",
    ]

    for (const indicator of assistantIndicators) {
      if (cleaned.toLowerCase().includes(indicator.toLowerCase())) {
        return originalText
      }
    }

    return cleaned || originalText
  }
}
