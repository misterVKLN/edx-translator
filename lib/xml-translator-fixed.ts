import { generateText } from "ai"
import { createOpenAI } from "@ai-sdk/openai"

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ XML –ø–æ –æ–±—Ä–∞–∑—Ü—É Streamlit –≤–µ—Ä—Å–∏–∏
export class FixedXMLTranslator {
  private apiKey: string
  private model: string

  constructor(apiKey: string, model: string) {
    this.apiKey = apiKey
    this.model = model
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–∫–∞–∫ –≤ Streamlit)
  private extractTextAndAttributes(content: string): Record<string, string> {
    const translations: Record<string, string> = {}

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã (–∫–∞–∫ –≤ Streamlit)
    const safeAttributes = ["display_name", "markdown"]

    for (const attr of safeAttributes) {
      const attributeRegex = new RegExp(`${attr}="([^"]+)"`, "g")
      let match
      while ((match = attributeRegex.exec(content)) !== null) {
        const value = match[1].trim()
        if (value && value.length > 2) {
          translations[value] = ""
        }
      }
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã (—Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ)
    const textNodeRegex = />([^<]+)</g
    let match
    while ((match = textNodeRegex.exec(content)) !== null) {
      const text = match[1].trim()
      if (
        text &&
        text.length > 2 &&
        !text.includes("=") &&
        !text.match(/^[a-f0-9]{32}$/) && // –Ω–µ MD5
        !text.match(/^[a-zA-Z0-9_-]+$/) && // –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        !text.includes("://") && // –Ω–µ URL
        !text.startsWith("/") && // –Ω–µ –ø—É—Ç—å
        !text.match(/^\d+(\.\d+)?$/) && // –Ω–µ —á–∏—Å–ª–æ
        !text.match(/^(true|false)$/i) // –Ω–µ boolean
      ) {
        translations[text] = ""
      }
    }

    return translations
  }

  // –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç (–∫–∞–∫ –≤ Streamlit)
  private replaceTextAndAttributes(content: string, translationMap: Record<string, string>): string {
    let result = content

    // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
    for (const [original, translated] of Object.entries(translationMap)) {
      if (translated && translated !== original) {
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        const escapedOriginal = original.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")

        // –ó–∞–º–µ–Ω—è–µ–º –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
        const attrRegex = new RegExp(`(display_name|markdown)="${escapedOriginal}"`, "g")
        result = result.replace(attrRegex, (match, attrName) => `${attrName}="${translated}"`)

        // –ó–∞–º–µ–Ω—è–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —É–∑–ª–∞—Ö
        const textRegex = new RegExp(`>${escapedOriginal}<`, "g")
        result = result.replace(textRegex, `>${translated}<`)
      }
    }

    return result
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ XML (–∫–∞–∫ –≤ Streamlit)
  async translateXMLContent(
    content: string,
    targetLanguage: string,
  ): Promise<{
    translatedContent: string
    translationsCount: number
  }> {
    // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    const translationMap = this.extractTextAndAttributes(content)
    const textsToTranslate = Object.keys(translationMap)

    if (textsToTranslate.length === 0) {
      return { translatedContent: content, translationsCount: 0 }
    }

    console.log(`üìù Found ${textsToTranslate.length} texts to translate in XML`)

    // 2. –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞–∂–¥—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
    let translationsCount = 0
    const openai = createOpenAI({ apiKey: this.apiKey })

    for (const text of textsToTranslate) {
      try {
        const translatedText = await this.translateSingleText(text, targetLanguage, openai)
        if (translatedText && translatedText !== text) {
          translationMap[text] = translatedText
          translationsCount++
        }
      } catch (error) {
        console.error(`‚ùå Failed to translate: "${text}"`, error)
        translationMap[text] = text // –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    }

    // 3. –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const translatedContent = this.replaceTextAndAttributes(content, translationMap)

    return { translatedContent, translationsCount }
  }

  private async translateSingleText(text: string, targetLanguage: string, openai: any): Promise<string> {
    const prompt = `
You MUST translate the content strictly into ${targetLanguage}, and ONLY ${targetLanguage}.
You MUST NOT add any explanations, disclaimers, general knowledge, or other languages.
You MUST preserve the original formatting, structure, and tags.
If you are unsure, return the original content as-is.
You are a TRANSLATION TOOL ONLY. Do not act as an assistant or provide commentary.
NEVER add phrases like "Here is the translation" or "The translated content is".
NEVER mix languages in your response.
RETURN ONLY THE TRANSLATED CONTENT, NOTHING ELSE.

Translate this text into ${targetLanguage}:
${text}
`

    const { text: translatedText } = await generateText({
      model: openai(this.model),
      prompt,
      temperature: 0.1,
      maxTokens: 1000,
    })

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    return this.validateAndCleanResponse(translatedText, text, targetLanguage)
  }

  private validateAndCleanResponse(response: string, originalText: string, targetLanguage: string): string {
    if (!response) return originalText

    const unwantedPhrases = [
      "Here is the translation",
      "The translated content is",
      "Here's the translated",
      "Translation:",
      "Translated version:",
      "–í–æ—Ç –ø–µ—Ä–µ–≤–æ–¥",
      "–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
    ]

    let cleaned = response.trim()

    for (const phrase of unwantedPhrases) {
      const regex = new RegExp(`^${phrase}[:\\s]*`, "i")
      cleaned = cleaned.replace(regex, "")
    }

    const assistantIndicators = [
      "I cannot",
      "I'm unable",
      "As an AI",
      "I apologize",
      "Sorry, but",
      "I can't",
      "–Ø –Ω–µ –º–æ–≥—É",
      "–ò–∑–≤–∏–Ω–∏—Ç–µ",
    ]

    for (const indicator of assistantIndicators) {
      if (cleaned.toLowerCase().includes(indicator.toLowerCase())) {
        return originalText
      }
    }

    return cleaned || originalText
  }
}
